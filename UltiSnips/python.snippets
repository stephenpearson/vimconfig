snippet defmain "main sentinel"
def main():
    pass

if __name__ == "__main__":
    main()    # pragma: no cover
endsnippet

snippet war "With assert raises"
with self.assertRaises($1):
    
endsnippet

snippet aimport "Imports for Abstract Class" b
import abc
from abc import ABCMeta
from abs import abstractmethod
from six import add_metaclass
endsnippet

snippet aclass "Abstract class"
@add_metaclass(ABCMeta)
class ${1:MyAbstractClass}(object):

    @abstractmethod
    def my_abstract_method(self):
        pass
endsnippet

snippet setup.py "setup.py with pbr" b
from setuptools import setup

setup(
    setup_requires=['pbr', ],
    pbr=True,
)
endsnippet

snippet futures "Common python futures" b
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement
endsnippet

snippet testcase "Description" b
from mock import patch
from testtools import TestCase


class TestChangeMe(TestCase):

    """Test case docstring."""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_name(self):
        pass
endsnippet

snippet coding "Description" b
# -*- coding: utf-8 -*-
endsnippet

snippet apache "Description" b
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

endsnippet

snippet docstring "Description" b
"""A multi line docstring has a one-line summary, less than 80 characters.

Then a new paragraph after a newline that explains in more detail any
general information about the function, class or method. Example usages
are also great to have here if it is a complex class or function.

When writing the docstring for a class, an extra line should be placed
after the closing quotations. For more in-depth explanations for these
decisions see http://www.python.org/dev/peps/pep-0257/

If you are going to describe parameters and return values, use Sphinx, the
appropriate syntax is as follows.

:param foo: the foo parameter
:param bar: the bar parameter
:returns: return_type -- description of the return value
:returns: description of the return value
:raises: AttributeError, KeyError
"""
endsnippet
